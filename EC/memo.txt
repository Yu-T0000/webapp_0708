

def __init__(self)って何？

StreamlitSessionManager().__init__()ってしなくても勝手に実行される部分
多分そんな感じ
selfはインスタンス自身

インスタンスを作ったタイミングで実行されるメソッド
初期化処理ってやつらしい

---

session 
manager
↑↓     model
pages   →      ← (Mock)service
↑↓                  ↑↓
app                 DB

Mock何？
ハリボテ的な

---

インスタンスって何？

クラスは、特定の属性や振る舞いを持つオブジェクトの設計図
クラスを実際に利用する際には、その設計図を元にして「インスタンス」が作られる

クラス 果物
    属性：名前 色
    メソッド(振る舞い)：食べられる 調理される

りんご は 果物 (りんごのインスタンス)
バナナ は 果物 (バナナのインスタンス)

作られたもの ↓

りんご(果物)
    属性：りんご 赤
    メソッド： 食べられる 調理される

バナナ(果物)
    属性：バナナ 黄
    メソッド： 食べられる 調理される

果物クラスを元に作られたインスタンスりんごには
食べられるコマンドがあるので
りんご は(.) 食べられる みたいなことができる

---

Generatorって何

イテレータ(データの要素を順番に取り出す反復処理をするためのオブジェクト)を生成するための関数

"イテレータは、データの逐次処理や大規模なデータセットの操作など、
要素を順番に取り出して処理する場合に便利です。
また、イテレータはメモリ効率が高く、要素を事前に全て生成する必要がないため、
大量のデータや無限のデータストリームを効率的に扱うことができます"

yieldキーワードを使用して値を返す

---

contextmanager何

デコレータ(既存の関数やクラスを修飾して機能を追加したり変更したりするための仕組み)
コンテキストマネージャ（Context Manager）を作成しやすくするやつ

"コンテキストマネージャは、リソースの取得と解放を管理するためのオブジェクトであり、
一連の処理を実行する前にリソースを初期化し、処理の後にリソースをクリーンアップするなど、
特定のブロックの前後で必要な処理を実行することができます。"

独自のコンテキストマネージャが作れるよ
作ったやつはwithで呼び出せるよ

---

型ヒント何

x: int = 10
みたいな感じで型情報を追記できるやつ

x = 10
と意味は一緒なので未来の自分とかコード読む人に向けた思いやりみたいなもん

